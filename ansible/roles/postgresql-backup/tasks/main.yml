- name: ensure backup dir exists
  file: path="{{ postgresql_backup_dir }}" state=directory owner={{ postgresql_user }} group={{ postgresql_user }}

- set_fact:
    postgresql_backup_gzip_file_name: "postgresql_backup_{{ lookup('pipe', 'date +%Z-%Y-%m-%d-%H-%M-%S') }}.sql.gz"

- set_fact:
    postgresql_backup_gzip_file_path: "{{ postgresql_backup_dir }}/{{ postgresql_backup_gzip_file_name }}"

- name: Save backup
  command: bash -lc "pg_dumpall | gzip > {{ postgresql_backup_gzip_file_path }}"
  become_user: "{{ postgresql_user }}"
  async: 3600
  poll: 10

- name: upload file to azure storage
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-upload.yml
  vars:
    blob_container_name: "{{ cloud_storage_postgresqlbackup_foldername }}"
    container_public_access: "off"
    blob_file_name: "{{ postgresql_backup_gzip_file_name }}"
    local_file_or_folder_path: "{{ postgresql_backup_gzip_file_path }}"
    storage_account_name: "{{ cloud_management_storage_accountname }}"
    storage_account_key: "{{ cloud_management_storage_secret }}"
  when: cloud_service_provider == "azure"

- name: upload file to aws s3
  include_role:
    name: aws-cloud-storage
    tasks_from: upload.yml
  vars:
    s3_bucket_name: "{{ cloud_storage_postgresqlbackup_bucketname }}"
    aws_access_key_id: "{{ cloud_management_storage_accountname }}"
    aws_secret_access_key: "{{ cloud_management_storage_secret }}"
    aws_default_region: "{{ cloud_public_storage_region }}"
    local_file_or_folder_path: "{{ postgresql_backup_gzip_file_path }}"
    s3_path: "{{ cloud_storage_postgresqlbackup_foldername }}/{{ postgresql_backup_gzip_file_name }}"
  when: cloud_service_provider == "aws"

- name: upload file to gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: upload.yml
  vars:
    gcp_storage_service_account_name: "{{ cloud_management_storage_accountname }}"
    gcp_storage_key_file: "{{ cloud_management_storage_secret }}"
    gcp_bucket_name: "{{ cloud_storage_postgresqlbackup_bucketname }}"
    gcp_path: "{{ cloud_storage_postgresqlbackup_foldername }}/{{ postgresql_backup_gzip_file_name }}"
    local_file_or_folder_path: "{{ postgresql_backup_gzip_file_path }}"
  when: cloud_service_provider == "gcloud"

- name: upload backup to OCI
  environment:
    OCI_CLI_AUTH: "instance_principal"
  vars:
    local_file_or_folder_path: "{{ postgresql_backup_dir }}"
    oss_bucket_name: "{{ cloud_storage_postgresqlbackup_bucketname }}"
    oss_path: "{{ cloud_storage_postgresqlbackup_foldername }}/{{ postgresql_backup_gzip_file_name }}"
    oci: "{{ oci_cli_location }}"
    namespace: "{{ oci_namespace }}"
  when: cloud_service_provider == "oci"
  block:
    - name: Upload folder to OCI
      command: "{{ oci_cli_location }} os object bulk-upload -ns {{namespace}}  -bn {{ oss_bucket_name }} --prefix {{oss_path}} --src-dir {{ local_file_or_folder_path }} --content-type auto --overwrite"

- name: clean up backup dir after upload
  file: path="{{ postgresql_backup_dir }}" state=absent
