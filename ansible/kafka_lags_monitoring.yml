- name: Display Kafka consumer group status
  hosts: ingestion-cluster-kafka
  gather_facts: no
  tasks:
    - name: Loop through Kafka consumer groups and check lag status
      command: /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server "localhost:9092" --describe --group "{{ item }}"
      register: consumer_group_output
      loop:
        - "dev-audit-event-generator-group"
        - "telemetry-group"
        - "prometheus-metrics-consumer"
        - "dev-post-publish-processor-group"
        - "ml-project-service"
        - "dev-audit-history-indexer-group"
        #- "learning-127.0.1.1"
        - "dev-search-indexer-group"
        - "outbound"
        - "dev-enrolment-reconciliation-group"
        - "devsamiksha"
        - "dev-relation-cache-updater-group"
        - "dev-content-publish-group"
        - "dev-qrcode-image-generator-group"
      loop_control:
        label: "{{ item }}"
    - name: Print Kafka lag status for each group
      debug:
        msg: |
          {% if item.stdout.find('No such consumer group') == -1 %}
          Consumer group '{{ item.item }}' has no active members.
          +-------------------------------------------------------------------+
          | Consumer group: '{{ item.item }}'                                |
          +------------------+------------------+----------+------------------+
          | GROUP            | TOPIC            | PARTITION | LAG             |
          +------------------+------------------+-----------+------------------+
          {% set consumer_details = item.stdout | regex_replace('.*?GROUP\\s+TOPIC\\s+PARTITION\\s+CURRENT-OFFSET\\s+LOG-END-OFFSET\\s+LAG\\s+CONSUMER-ID\\s+HOST\\s+CLIENT-ID\\s+(.*?)\\n.*', '\\1') %}
          {% set consumer_lines = consumer_details.split('\n') %}
          {% for line in consumer_lines %}
          {% if line %}
          {% set columns = line.split() %}
          | {{ columns[0] | center(16) }} | {{ columns[1] | center(16) }} | {{ columns[2] | center(10) }} | {{ columns[5] | center(16) }} |
          {% endif %}
          {% endfor %}
          +------------------+------------------+-----------+------------------+
          {% set lag = item.stdout | regex_replace('^[\\s\\S]*LAG[^0-9]*([0-9]+)[\\s\\S]*$', '\\1') | int %}
          {% if lag <= 9 %}
          Kafka lag for group '{{ item.item }}' is normal (0 to 9)
          {% else %}
          Kafka lag for group '{{ item.item }}' is high
          {% endif %}
          ----------------------------------------
          {% endif %}
      loop: "{{ consumer_group_output.results }}"
      loop_control:
        label: "{{ item.item }}"
