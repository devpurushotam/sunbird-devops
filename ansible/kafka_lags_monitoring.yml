- name: Display Kafka consumer group status
  hosts: ingestion-cluster-kafka
  gather_facts: no
  tasks:
    - name: Get Kafka consumer group list
      command: /opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list
      register: kafka_group_list
      failed_when: "kafka_group_list.stderr and 'Error: Consumer group' in kafka_group_list.stderr"

    - name: Loop through Kafka consumer groups and check lag status
      command: /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server "localhost:9092" --describe --group "{{ item }}"
      register: consumer_group_output
      loop: "{{ kafka_group_list.stdout_lines }}"
      loop_control:
        label: "{{ item }}"
      failed_when: "consumer_group_output.stderr and 'Error: Consumer group' in consumer_group_output.stderr"

    - name: Print Kafka lag status for each group
      debug:
        msg: |
          Checking Kafka Consumer Group: {{ item.item }}
          Consumer group '{{ item.item }}' has no active members.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|          GROUP                |               TOPIC        |      PARTITION   |  CURRENT-OFFSET   | LOG-END-OFFSET  |    LAG    |      CONSUMER-ID    |    HOST    |   CLIENT-ID          |
|          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          {% for line in item.stdout_lines[1:] %}
          {{ line }}
          {% endfor %}

          {% set lag = item.stdout | regex_findall('LAG\\s+(\\d+)') | map('int') | list %}
          {% set high_lag = lag | select('>=', 10) | list %}
          {% if high_lag %}
          Kafka lag for group '{{ item.item }}' is high (greater than 9)
          {% else %}
          Kafka lag for group '{{ item.item }}' is normal (0 to 9)
          {% endif %}
          ----------------------------------------
      loop: "{{ consumer_group_output.results }}"
      loop_control:
        label: "{{ item.item }}"
      when: not item.failed  # Skip printing for failed items

