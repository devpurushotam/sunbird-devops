- name: Display Kafka consumer group status
  hosts: ingestion-cluster-kafka
  gather_facts: no
  tasks:
    - name: Create directory for output file
      file:
        path: /path/to/output
        state: directory
      delegate_to: localhost
      become: yes

    - name: Initialize the content with table headers
      set_fact:
        output_content: |
          | Group                           | Partition | Current Offset | Log End Offset | Lag | Consumer ID | Host | Client ID |
          |---------------------------------|-----------|----------------|----------------|-----|-------------|------|-----------|

    - name: Loop through Kafka consumer groups and check lag status
      shell: /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server "localhost:9092" --describe --group "{{ item }}"
      register: consumer_group_output
      loop:
        - "dev-audit-event-generator-group"
        - "telemetry-group"
        - "prometheus-metrics-consumer"
        - "dev-post-publish-processor-group"
        - "ml-project-service"
        - "dev-audit-history-indexer-group"
        - "learning-127.0.1.1"
        - "dev-search-indexer-group"
        - "outbound"
        - "dev-enrolment-reconciliation-group"
        - "devsamiksha"
        - "dev-relation-cache-updater-group"
        - "dev-content-publish-group"
        - "dev-qrcode-image-generator-group"
      loop_control:
        label: "{{ item }}"
    
    - name: Append data to output content
      set_fact:
        output_content: "{{ output_content }}\n{{ consumer_group_output.stdout | regex_replace('^[\\s\\S]*GROUP[^\\n]*\\n([\\s\\S]*)$', '\\1') | regex_replace('(\\n)+', '\\n') | regex_replace('^\\n|\\n$', '') }}"

    - name: Check lag status and update output content
      set_fact:
        output_content: "{{ output_content }}\n{% set lag = consumer_group_output.stdout | regex_replace('^[\\s\\S]*LAG[^0-9]*([0-9]+)[\\s\\S]*$', '\\1') | int %}{% if lag <= 9 %}Kafka lag for group '{{ item }}' is normal (0 to 9){% else %}Kafka lag for group '{{ item }}' is high{% endif %}"

    - name: Save Kafka lag status to file
      copy:
        content: "{{ output_content }}"
        dest: /path/to/output/file.txt
      delegate_to: localhost
      become: yes

    - name: Print Kafka lag status for each group
      command: cat /path/to/output/file.txt
      register: printed_output
      changed_when: false
      ignore_errors: true
      delegate_to: localhost

    - debug:
        msg: "{{ printed_output.stdout }}"
