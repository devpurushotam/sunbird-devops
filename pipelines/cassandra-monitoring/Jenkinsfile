@Library('deploy-conf') _
 
def call(String email_list = "alertsdiksha@gov.in") {
    try {
        ansiColor('xterm') {
            String ANSI_GREEN = "\u001B[32m"
            String ANSI_NORMAL = "\u001B[0m"
            String ANSI_BOLD = "\u001B[1m"
            String ANSI_RED = "\u001B[31m"
            String ANSI_YELLOW = "\u001B[33m"
 
            if (email_list.length() > 0) {
                // Send email using the built-in 'mail' step
                mail (
                    to: email_list,
                    subject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!",
                    body: "Pipeline ${currentBuild.result}: Check console output at $BUILD_URL to view the results."
                )
                return
            }
 
            stage('email_notify') {
                try {
                    envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
                    email_group_name = envDir.toUpperCase() + "_EMAIL_GROUP"
                    email_group = evaluate "$email_group_name"
                    // Send email using the built-in 'mail' step
                    mail (
                        to: email_group,
                        subject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!",
                        body: "Pipeline ${currentBuild.result}: Check console output at $BUILD_URL to view the results."
                    )
                    return
                } catch (MissingPropertyException ex) {
                    println ANSI_YELLOW + ANSI_BOLD + "Could not find env specific email group. Check for global email group.." + ANSI_NORMAL
                } catch (ArrayIndexOutOfBoundsException ex) {
                    println ANSI_YELLOW + ANSI_BOLD + "Could not find env specific email group. Check for global email group.." + ANSI_NORMAL
                }
 
                if (env.GLOBAL_EMAIL_GROUP != null) {
                    // Send email using the built-in 'mail' step
                    mail (
                        to: env.GLOBAL_EMAIL_GROUP,
                        subject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!",
                        body: "Pipeline ${currentBuild.result}: Check console output at $BUILD_URL to view the results."
                    )
                } else {
                    println ANSI_YELLOW + ANSI_BOLD + "Could not find global email group variable. Skipping email notification.." + ANSI_NORMAL
                }
            }
        }
    } catch (err) {
        throw err
    }
}
 
pipeline {
    agent any
    stages {
        stage('checkout public repo') {
            steps {
                script {
                    folder = new File("$WORKSPACE/.git")
                    if (folder.exists()) {
                        println "Found .git folder. Clearing it.."
                        sh 'git clean -fxd'
                    }
                    checkout scm
                }
            }
        }
 
        stage('deploy') {
            steps {
                script {
                    values = [:]
                    envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
                    module = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
                    jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim()
                    currentWs = sh(returnStdout: true, script: 'pwd').trim()
                    ansiblePlaybook = "${currentWs}/ansible/cassandra_monitoring.yml"
                    ansibleExtraArgs = "--vault-password-file /var/lib/jenkins/secrets/vault-pass"
                    values.put('currentWs', currentWs)
                    values.put('env', envDir)
                    values.put('module', module)
                    values.put('jobName', jobName)
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
                    ansible_playbook_run(values)
                    currentBuild.result = 'SUCCESS'
                    currentBuild.description = "Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
                }
            }
        }
    }
}
